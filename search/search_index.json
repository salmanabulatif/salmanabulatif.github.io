{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"2025/12/07/snr-blog/","title":"SNR Blog","text":"<p>Welcome to the blog for the Wi-Fi Proximity Sensor project, where we transform a standard Wi-Fi adapter into a real-time proximity detector using machine learning.</p>"},{"location":"2025/12/07/snr-blog/#wi-fi-proximity-sensing-with-machine-learning","title":"Wi-Fi Proximity Sensing with Machine Learning","text":"<p>Welcome to the blog for the Wi-Fi Proximity Sensor project, where we transform a standard Wi-Fi adapter into a real-time proximity detector using machine learning. In this post, you'll learn how wireless signal metrics (like SNR) can be used for presence detection, and how adding data-driven intelligence unlocks robust, adaptive performance for smart environments.</p>"},{"location":"2025/12/07/snr-blog/#overview","title":"Overview","text":"<p>This project uses a standard Wi-Fi adaptor as a proximity sensor by monitoring wireless signal strength, noise levels, and Signal-to-Noise Ratio (SNR). The sensor estimates how close or far objects are by analyzing how wireless metrics change over time.</p> <p>While traditional approaches use static thresholds (e.g., \"SNR less than X means close\"), we leverage machine learning to adapt to different environments and hardware, improving accuracy and robustness.</p>"},{"location":"2025/12/07/snr-blog/#motivation-applications","title":"Motivation &amp; Applications","text":"<p>Why turn a Wi-Fi adaptor into a proximity sensor?</p> <ul> <li>Presence detection: Know when someone enters or leaves a room.</li> <li>Smart automation: Trigger IoT devices based on proximity.</li> <li>Security: Alert when unexpected movement is detected.</li> <li>Robotics: Enable robots to sense nearby obstacles using wireless signals.</li> </ul> <p>Traditional sensors (infrared, ultrasonic) require dedicated hardware. Wi-Fi metrics are available on most devices and can be repurposed for sensing, often with zero extra hardware cost.</p>"},{"location":"2025/12/07/snr-blog/#how-it-works","title":"How It Works","text":"<ol> <li>Read Wi-Fi Metrics:    The script monitors signal (<code>dBm</code>), noise (<code>dBm</code>), and calculates SNR.</li> <li>Estimate Distance:    A simple formula estimates distance from SNR (higher SNR = closer).</li> <li>Status Classification:    Static logic classifies readings into zones: \"Very Close\", \"Normal Range\", \"Far Away\", etc.</li> <li>Live Monitoring:    The script prints proximity status in real-time.</li> </ol>"},{"location":"2025/12/07/snr-blog/#limitations-of-static-thresholds","title":"Limitations of Static Thresholds","text":"<ul> <li>Every environment (walls, furniture, interference) changes the relationship between SNR and actual distance.</li> <li>Hardware differences affect readings.</li> <li>Static logic struggles in noisy or dynamic settings.</li> </ul>"},{"location":"2025/12/07/snr-blog/#adding-machine-learning","title":"Adding Machine Learning","text":"<p>To solve these limitations, we introduce a machine learning model:</p> <ol> <li>Data Collection Mode:    Collect signal, noise, SNR, and your true distance (or label) at each reading.</li> <li>Model Training Mode:    Train a regression or classification model using <code>scikit-learn</code> for your specific environment/hardware.</li> <li>Inference Mode:    The script uses your trained model for smarter, adaptive proximity prediction.</li> </ol>"},{"location":"2025/12/07/snr-blog/#benefits","title":"Benefits","text":"<ul> <li>Adapts to your unique hardware and environment.</li> <li>Learns from real, labeled data.</li> <li>Can predict actual distances or custom proximity zones.</li> </ul>"},{"location":"2025/12/07/snr-blog/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"2025/12/07/snr-blog/#1-install-requirements","title":"1. Install Requirements","text":"<pre><code>pip install scikit-learn joblib mkdocs\n</code></pre>"},{"location":"2025/12/07/snr-blog/#2-collect-training-data","title":"2. Collect Training Data","text":"<p>Run the script in data collection mode:</p> <pre><code>python3 codev0_ml.py --collect\n</code></pre> <p>For each sample, enter the true distance (in cm) or a label (e.g., \"VERY CLOSE\") at the prompt. Try different locations and distances for variety!</p>"},{"location":"2025/12/07/snr-blog/#3-train-the-machine-learning-model","title":"3. Train the Machine Learning Model","text":"<pre><code>python3 codev0_ml.py --train\n</code></pre> <p>This creates a model file (<code>wifi_proximity_model.pkl</code>).</p>"},{"location":"2025/12/07/snr-blog/#4-run-in-monitoring-mode","title":"4. Run in Monitoring Mode","text":"<pre><code>python3 codev0_ml.py\n</code></pre> <p>If a trained model is found, it will use ML for proximity prediction. Otherwise, it falls back to static logic.</p>"},{"location":"2025/12/07/snr-blog/#sample-code","title":"Sample Code","text":"<p>Here\u2019s a simplified snippet for the ML-enhanced proximity sensor:</p> <pre><code>def get_features(metrics, snr):\n    return [\n        metrics['signal'] if metrics['signal'] is not None else -100,\n        metrics['noise'] if metrics['noise'] is not None else -90,\n        snr if snr is not None else 0\n    ]\n\ndef predict_proximity(model, metrics, snr):\n    features = [get_features(metrics, snr)]\n    pred = model.predict(features)[0]\n    if isinstance(pred, float):\n        # Regression: map distance to status\n        if pred &lt; 50:\n            status = \"VERY CLOSE (&lt;50 cm)\"\n        elif pred &lt; 200:\n            status = \"NORMAL RANGE (0.5-2 m)\"\n        elif pred &lt; 400:\n            status = \"MOVING AWAY (2-4 m)\"\n        else:\n            status = \"FAR AWAY (&gt;4 m)\"\n        return status, f\"{pred:.1f} cm\"\n    else:\n        return pred, None\n</code></pre> <p>Full code will be shared on github soon</p>"},{"location":"2025/12/07/snr-blog/#results-improvements","title":"Results &amp; Improvements","text":""},{"location":"2025/12/07/snr-blog/#what-you-get","title":"What You Get","text":"<ul> <li>Real-time proximity estimates via Wi-Fi metrics.</li> <li>Customizable accuracy for your environment.</li> <li>Adaptability to any Wi-Fi hardware.</li> </ul>"},{"location":"2025/12/07/snr-blog/#how-to-improve-further","title":"How to Improve Further","text":"<ul> <li>Collect more data for better accuracy.</li> <li>Try advanced ML models (Random Forest, Neural Network).</li> <li>Add more features (channel frequency, historical data).</li> <li>Integrate with smart home automations or robotics.</li> </ul>"},{"location":"2025/12/07/snr-blog/#next-steps","title":"Next Steps","text":"<ul> <li>Package as a Python module.</li> <li>Integrate with Home Assistant.</li> <li>Visualize data with Grafana or Plotly.</li> <li>Explore other wireless metrics (Bluetooth, Zigbee).</li> </ul>"},{"location":"2025/12/07/snr-blog/#references","title":"References","text":"<ul> <li>Scikit-learn documentation</li> <li>joblib documentation</li> <li>Wireless metrics on Linux</li> <li>Presence detection with Wi-Fi</li> </ul>"},{"location":"2025/12/07/snr-blog/#conclusion","title":"Conclusion","text":"<p>With just a Wi-Fi adaptor and some data, you can build a smart proximity sensor powered by machine learning. This approach is flexible, affordable, and adaptable to countless smart environments. Happy hacking!</p>"},{"location":"archive/2025/","title":"2025","text":""}]}